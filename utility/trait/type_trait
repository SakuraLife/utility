
#ifndef __UTILITY_TRAIT_TYPE__
#define __UTILITY_TRAIT_TYPE__

#include<utility/trait/type_traits.hpp>

namespace utility
{
/*
  // categories
  using utility::trait::type::categories::is_void;
  using utility::trait::type::categories::is_null_pointer;
  using utility::trait::type::categories::is_nullptr_t;
  using utility::trait::type::categories::is_integral;
  using utility::trait::type::categories::is_floating_point;
  using utility::trait::type::categories::is_array;
  using utility::trait::type::categories::is_enum;
  using utility::trait::type::categories::is_union;
  using utility::trait::type::categories::is_class;
  using utility::trait::type::categories::is_function;
  using utility::trait::type::categories::is_pointer;
  using utility::trait::type::categories::is_reference;
  using utility::trait::type::categories::is_lvalue_reference;
  using utility::trait::type::categories::is_rvalue_reference;
  using utility::trait::type::categories::is_member_object_pointer;
  using utility::trait::type::categories::is_member_function_pointer;
  using utility::trait::type::categories::is_fundamental;
  using utility::trait::type::categories::is_arithmetic;
  using utility::trait::type::categories::is_scalar;
  using utility::trait::type::categories::is_object;
  using utility::trait::type::categories::is_compound;
  using utility::trait::type::categories::is_member_pointer;

  // transform
  using utility::trait::type::transform::remove_const;
  using utility::trait::type::transform::remove_volatile;
  using utility::trait::type::transform::remove_cv;
  using utility::trait::type::transform::add_const;
  using utility::trait::type::transform::add_volatile;
  using utility::trait::type::transform::add_cv;
  using utility::trait::type::transform::remove_reference;
  using utility::trait::type::transform::add_lvalue_reference;
  using utility::trait::type::transform::add_rvalue_reference;
  using utility::trait::type::transform::remove_pointer;
  using utility::trait::type::transform::add_pointer;
  using utility::trait::type::transform::remove_extent;
  using utility::trait::type::transform::remove_all_extents;
  using utility::trait::type::transform::decay;
*/
}


#endif // ! __UTILITY_TRAIT_TYPE__
